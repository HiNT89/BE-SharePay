// Import NestFactory ƒë·ªÉ t·∫°o NestJS application instance
import { NestFactory } from '@nestjs/core';

// Import ValidationPipe ƒë·ªÉ validate request data t·ª± ƒë·ªông
import { ValidationPipe } from '@nestjs/common';

// Import Swagger modules ƒë·ªÉ t·∫°o API documentation
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';

// Import root module c·ªßa ·ª©ng d·ª•ng
import { AppModule } from './app.module';

// Import global exception filter ƒë·ªÉ x·ª≠ l√Ω errors
// import { AllExceptionsFilter } from './common/all-exceptions.filter';

// Import response interceptor ƒë·ªÉ th√™m metadata
// import { ResponseInterceptor } from './common/interceptors/response.interceptor';

/**
 * Bootstrap function - Kh·ªüi t·∫°o v√† c·∫•u h√¨nh NestJS application
 *
 * Ch·ª©c nƒÉng ch√≠nh:
 * - T·∫°o NestJS application instance
 * - C·∫•u h√¨nh global middlewares, pipes, filters
 * - Thi·∫øt l·∫≠p CORS cho cross-origin requests
 * - T·∫°o Swagger documentation
 * - Start HTTP server
 */
async function bootstrap() {
  // T·∫°o NestJS application instance t·ª´ AppModule
  const app = await NestFactory.create(AppModule);

  /**
   * √Åp d·ª•ng Global Exception Filter
   * X·ª≠ l√Ω t·∫•t c·∫£ exceptions trong ·ª©ng d·ª•ng v√† format response nh·∫•t qu√°n
   */
  // app.useGlobalFilters(new AllExceptionsFilter());

  /**
   * √Åp d·ª•ng Global Response Interceptor
   * T·ª± ƒë·ªông th√™m metadata v√†o t·∫•t c·∫£ response
   */
  // app.useGlobalInterceptors(new ResponseInterceptor());

  /**
   * √Åp d·ª•ng Global Validation Pipe
   * T·ª± ƒë·ªông validate request data d·ª±a tr√™n DTOs v·ªõi class-validator
   *
   * Options:
   * - whitelist: Ch·ªâ cho ph√©p properties ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong DTO
   * - forbidNonWhitelisted: Throw error n·∫øu c√≥ properties kh√¥ng ƒë∆∞·ª£c ph√©p
   * - transform: T·ª± ƒë·ªông transform plain object th√†nh DTO instance
   */
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
    }),
  );

  /**
   * C·∫•u h√¨nh CORS (Cross-Origin Resource Sharing)
   * Cho ph√©p frontend truy c·∫≠p API t·ª´ c√°c domain kh√°c
   *
   * Options:
   * - origin: Danh s√°ch c√°c domain ƒë∆∞·ª£c ph√©p truy c·∫≠p
   * - credentials: Cho ph√©p g·ª≠i cookies v√† authentication headers
   */
  app.enableCors({
    origin: ['http://localhost:3000'], // Frontend URLs
    credentials: true,
  });

  /**
   * C·∫•u h√¨nh Swagger API Documentation
   * T·∫°o interactive API docs v·ªõi kh·∫£ nƒÉng test tr·ª±c ti·∫øp
   */
  const config = new DocumentBuilder()
    .setTitle('SharePay API')
    .setDescription('API documentation cho ·ª©ng d·ª•ng SharePay - Chia s·∫ª chi ph√≠')
    .setVersion('1.0')

    // C·∫•u h√¨nh Bearer Authentication cho JWT tokens
    .addBearerAuth(
      {
        description: 'JWT Authorization token',
        name: 'Authorization',
        bearerFormat: 'Bearer',
        scheme: 'Bearer',
        type: 'http',
        in: 'Header',
      },
      'access-token', // Reference name ƒë·ªÉ s·ª≠ d·ª•ng trong @ApiBearerAuth()
    )

    // Th√™m c√°c tags ƒë·ªÉ nh√≥m endpoints trong Swagger UI
    .addTag('Authentication', 'C√°c API li√™n quan ƒë·∫øn x√°c th·ª±c')
    .addTag('Users', 'C√°c API qu·∫£n l√Ω ng∆∞·ªùi d√πng')
    .addTag('Bills', 'C√°c API qu·∫£n l√Ω h√≥a ƒë∆°n chia s·∫ª chi ph√≠')
    .addTag('Bill Items', 'C√°c API qu·∫£n l√Ω items trong h√≥a ƒë∆°n')
    .addTag('Payments', 'C√°c API qu·∫£n l√Ω thanh to√°n')
    .build();

  // T·∫°o Swagger document t·ª´ c·∫•u h√¨nh v√† metadata c·ªßa ·ª©ng d·ª•ng
  const document = SwaggerModule.createDocument(app, config);

  // Setup Swagger UI t·∫°i ƒë∆∞·ªùng d·∫´n /api/docs
  SwaggerModule.setup('api/docs', app, document, {
    swaggerOptions: {
      // L∆∞u authorization token trong localStorage ƒë·ªÉ t√°i s·ª≠ d·ª•ng
      persistAuthorization: true,
    },
  });

  /**
   * Start HTTP server
   * L·∫•y port t·ª´ environment variable ho·∫∑c s·ª≠ d·ª•ng default port 3000
   */
  const port = process.env.PORT || 3000;
  await app.listen(port);

  // Log th√¥ng tin server ƒë√£ start th√†nh c√¥ng
  console.log(`üöÄ Application is running on: http://localhost:${port}`);
  console.log(`üìö Swagger documentation: http://localhost:${port}/api/docs`);
}

// G·ªçi bootstrap function ƒë·ªÉ kh·ªüi ch·∫°y ·ª©ng d·ª•ng
bootstrap();
